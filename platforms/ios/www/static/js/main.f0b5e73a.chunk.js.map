{"version":3,"sources":["reducers/index.js","reducers/usersReducer.js","reducers/paramsReducer.js","history.js","apis/jsonPlaceholder.js","components/Menu.js","components/MainMenu.js","actions/index.js","actions/types.js","components/SubMenu.js","components/content-components/address.js","components/content-components/company.js","components/Content.js","containers/appContainer.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","users","state","arguments","length","undefined","action","type","payload","params","createBrowserHistory","axios","create","baseURL","Menu","_ref","title","style","link","list","currentUser","react_default","a","createElement","className","react_router_dom","to","MainMenu","this","props","fetchUsers","map","user","concat","id","key","name","class_name","submenuId","contentId","_this$props","components_Menu","renderCurrentUser","renderStyles","renderUsers","Component","connect","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","wrap","_context","prev","next","json","get","sent","data","stop","_x","apply","SubMenu","address","city","company","renderUser","Address","street","zipcode","suite","renderAddress","Company","catchPhrase","bs","renderCompany","Content","react_router","path","component","AppContainer","tiers","paramsAction","match","renderTiers","history","isLocalhost","Boolean","window","location","hostname","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","then","response","contentType","headers","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","createStoreWithMiddleware","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","composeEnhancers","createStore","startApp","ReactDOM","render","es","store","reducers","document","querySelector","cordova"],"mappings":"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","file":"static/js/main.f0b5e73a.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport usersReducer from './usersReducer';\nimport paramsReducer from './paramsReducer';\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  params: paramsReducer\n});\n\nexport default rootReducer;","export default (state = [], action) => {\n  switch (action.type) {\n    case \"FETCH_USERS\":\n      return action.payload\n    default:\n      return state;\n  }\n};\n","export default (state = '', action) => {\n  switch (action.type) {\n  case 'PARAMS_ACTION':\n    return action.payload\n  default:\n    return state\n  }\n}\n","import { createBrowserHistory } from 'history'; \nexport default createBrowserHistory();","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n})","import React from \"react\";\nimport { Link} from 'react-router-dom';\n\nconst Menu = ({ title, style, link, list, currentUser }) => {\n  return (\n    <div className={style}>\n      <Link to={link} className={title[1]}>{title[0]}</Link>\n      <h5 className='current-user'>{currentUser}</h5>\n      <div className='list-unstyled'>{list}</div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchUsers } from \"../actions\";\nimport { Link } from \"react-router-dom\";\n\nimport Menu from './Menu';\n\nclass MainMenu extends Component {\n\n  // fetching users\n  componentDidMount() {\n    this.props.fetchUsers();\n  }\n  // rendering every user here\n  renderUsers() {\n    const { users } = this.props;\n    return users.map(user => {\n      return (\n        <Link to={`/${user.id}`} key={user.id}>\n          <li>{user.name}</li>\n        </Link>\n      );\n    });\n  }\n\n  renderStyles() {\n    const { params } = this.props;\n    let class_name;\n    if (params) class_name = \"col-12\";\n    if (params.submenuId) class_name = \"col-2\";\n    if (params.contentId) class_name = \"col-2\";\n    class_name += ' menu'\n    return class_name;\n  }\n  renderCurrentUser() {\n    const { users, params } = this.props;\n    const user = users[params.submenuId];\n    if(user) {\n      return (\n        <div>\n          {user.name}\n        </div>\n      )\n    }\n  }\n\n// override boostrap with width percentage\n// use props to spit out each indivual stuff for the menus in each component\n      // {/* show the active user from the redux store instead of Main menu using the user.id */}\n\n  render() {\n    return <Menu\n          currentUser={this.renderCurrentUser()}\n          link='/'\n          style={this.renderStyles()}\n          list={this.renderUsers()}\n          title={['Main Menu', 'main-menu']}\n          />\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    params: state.params\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchUsers }\n)(MainMenu);\n","import {\n    FETCH_USERS,\n    PARAMS_ACTION\n} from './types';\n\nimport json from '../apis/jsonPlaceholder';\n\n\nexport const fetchUsers = () => async dispatch => {\n    const res = await json.get('/users');\n    dispatch({ type: FETCH_USERS, payload: res.data })\n}\n\nexport const paramsAction = params => ({\n  type: PARAMS_ACTION,\n  payload: params\n})","export const FETCH_USERS = 'FETCH_USERS';\nexport const PARAMS_ACTION = 'PARAMS_ACTION';","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport Menu from './Menu';\n\n\nclass SubMenu extends Component {\n  renderStyles() {\n    const { params } = this.props;\n    let class_name;\n    if (params.submenuId) class_name = \"col-10\";\n    if (params.contentId) class_name = \"col-2\";\n    class_name += ' submenu'\n    return class_name;\n  }\n\n  renderUser() {\n    const { users, params } = this.props;\n    const user = users[params.submenuId];\n    if (user) {\n      return (\n        <ul className=\"list-unstyled\">\n          <Link to={`/${params.submenuId}/address`}>\n            <li>{user.address.city}</li>\n          </Link>\n          <hr />\n          <Link to={`/${params.submenuId}/company`}>\n            <li>{user.company.name}</li>\n          </Link>\n        </ul>\n      );\n    }\n  }\n\n  render() {\n    const { params } = this.props;\n    return (\n      <Menu\n        link={`/${params.submenuId}`}\n        style={this.renderStyles()}\n        title={[\"SubMenu\", \"submenu-menu\"]}\n        list={this.renderUser()}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    params: state.params\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(SubMenu);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Address extends Component {\n  renderAddress() {\n    const { params, users } = this.props;\n    let user = users[params.submenuId];\n    if (user)\n      return (\n        <div>\n            <h1>{user.address.city}</h1>\n            <h3>{user.address.street}</h3>\n            <hr />\n            <h4>{user.address.zipcode}</h4>\n            <h3>{user.address.suite}</h3>\n        </div>\n      );\n  }\n  render() {\n    return (\n      <div>\n        <h1 className=\"menus\">Address</h1>\n        {this.renderAddress()}\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    params: state.params\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Address);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nclass Company extends Component {\n    renderCompany() {\n        const { users, params } = this.props;\n        const user = users[params.submenuId];\n        if(user)\n          return (\n            <div>\n              <h1>{user.company.name}</h1>\n              <h5>{user.company.catchPhrase}</h5>\n              <hr />\n              <h4>{user.company.bs}</h4>\n            </div>\n          )\n      }\n\n  render() {\n    return (\n        <div>\n            <h1 className='menus'>Company</h1>\n            {this.renderCompany()}\n            <h1 className='bruh'>orer otances occur in which toil and pain can procure him some great pleasuuences, or one w</h1>\n        </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.users,\n        params: state.params\n    }\n}\nexport default connect(mapStateToProps, null)(Company);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from 'react-router-dom';\n\nimport Address from './content-components/address';\nimport Company from './content-components/company';\n\n\nclass Content extends Component {\n  renderStyles() {\n    const {params} = this.props;\n    let class_name;\n    if(params.contentId) class_name = 'col-8'\n    return class_name\n  }\n  \n  render() {\n    return (\n      <div className={`${this.renderStyles()} content`}>\n        <Route path='/:submenuId/address' component={Address}/>\n        <Route path='/:submenuId/company' component={Company}/>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    params: state.params\n  };\n};\nexport default connect(\n  mapStateToProps,\n  null\n)(Content);\n","import React, { Component } from 'react'\nimport { Router, Route} from 'react-router-dom';\nimport history from '../history';\nimport { connect } from 'react-redux';\nimport { paramsAction } from '../actions';\n\nimport MainMenu from '../components/MainMenu';\nimport SubMenu from '../components/SubMenu';\nimport Content from '../components/Content';\n\nclass AppContainer extends Component {\n\n  renderTiers() {\n    let tiers = 'tier-one';\n    const {params} = this.props;\n    if(params.submenuId) tiers = 'tier-two';\n    if(params.contentId) tiers = 'tier-three';\n    return tiers\n  }\n  render() {\n      this.props.paramsAction(this.props.match.params)\n    return (\n      <div className={`row text-center ${this.renderTiers()}`}>\n          <Router history={history}>\n            <Route path='/' component={MainMenu}/>\n            <Route path='/:submenuId' component={SubMenu}/>\n            <Route path='/:submenuId/:contentId' component={Content}/>\n          </Router>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    params: state.params\n  };\n};\n\n\nexport default connect(mapStateToProps, {paramsAction}) (AppContainer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Router, Route } from \"react-router-dom\";\nimport reducers from \"./reducers\";\n\nimport history from \"./history\";\nimport AppContainer from './containers/appContainer';\n\n\nimport \"./style/main.scss\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst createStoreWithMiddleware = composeEnhancers(applyMiddleware(thunk))(\n  createStore\n);\n\nconst startApp = () => {\n  ReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n      <Router history={history}>\n        <div>\n          <Route path={['/:submenuId/:contentId', '/:submenuId', '/']} component={AppContainer} />\n        </div>\n      </Router>\n    </Provider>,\n    document.querySelector(\"#root\")\n  );\n  serviceWorker.register()\n};\n\nif(window.cordova) {\n  document.addEventListener('deviceready', startApp, false);\n} else {\n  startApp();\n}"],"sourceRoot":""}