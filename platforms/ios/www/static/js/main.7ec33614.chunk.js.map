{"version":3,"sources":["reducers/index.js","reducers/usersReducer.js","reducers/paramsReducer.js","history.js","apis/jsonPlaceholder.js","actions/index.js","actions/types.js","components/Menu.js","components/SubMenu.js","components/content-components/address.js","components/content-components/company.js","components/Content.js","containers/appContainer.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","users","state","arguments","length","undefined","action","type","payload","params","createBrowserHistory","axios","create","baseURL","fetchUsers","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","json","get","sent","data","stop","_x","apply","this","Menu","width","window","innerWidth","handleWindowSizeChange","_this","setState","addEventListener","removeEventListener","props","mobile","map","user","react_default","createElement","react_router_dom","to","concat","id","key","className","name","class_name","submenuId","contentId","renderStyles","renderUsers","Component","connect","SubMenu","_this$props","address","city","company","renderUser","Address","street","zipcode","suite","renderAddress","Company","catchPhrase","bs","renderCompany","Content","react_router","path","component","AppContainer","paramsAction","match","history","isLocalhost","Boolean","location","hostname","register","config","navigator","URL","process","href","origin","swUrl","fetch","then","response","contentType","headers","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","createStoreWithMiddleware","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","composeEnhancers","createStore","startApp","ReactDOM","render","es","store","reducers","document","querySelector","cordova"],"mappings":"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","file":"static/js/main.7ec33614.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport usersReducer from './usersReducer';\nimport paramsReducer from './paramsReducer';\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  params: paramsReducer\n});\n\nexport default rootReducer;","export default (state = [], action) => {\n  switch (action.type) {\n    case \"FETCH_USERS\":\n      return action.payload\n    default:\n      return state;\n  }\n};\n","export default (state = '', action) => {\n  switch (action.type) {\n  case 'PARAMS_ACTION':\n    return action.payload\n  default:\n    return state\n  }\n}\n","import { createBrowserHistory } from 'history'; \nexport default createBrowserHistory();","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n})","import {\n    FETCH_USERS,\n    PARAMS_ACTION\n} from './types';\n\nimport json from '../apis/jsonPlaceholder';\n\n\nexport const fetchUsers = () => async dispatch => {\n    const res = await json.get('/users');\n    dispatch({ type: FETCH_USERS, payload: res.data })\n}\n\nexport const paramsAction = params => ({\n  type: PARAMS_ACTION,\n  payload: params\n})","export const FETCH_USERS = 'FETCH_USERS';\nexport const PARAMS_ACTION = 'PARAMS_ACTION';","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchUsers } from \"../actions\";\nimport { Link } from \"react-router-dom\";\n\nclass Menu extends Component {\n  state = { width: window.innerWidth };\n\n  componentWillMount() {\n    window.addEventListener(\"resize\", this.handleWindowSizeChange);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowSizeChange);\n  }\n  handleWindowSizeChange = () => {\n    this.setState({ width: window.innerWidth });\n  };\n\n  // fetching users\n  componentDidMount() {\n    this.props.fetchUsers();\n  }\n  // rendering every user here\n  renderUsers() {\n    const { width } = this.state;\n    const mobile = width <= 500;\n    const { users } = this.props;\n    return users.map(user => {\n      if (mobile) {\n        return (\n          <Link to={`/${user.id}`} key={user.id}>\n            <li className=\"mobile-list\">{user.name}</li>\n          </Link>\n        );\n      } else {\n        return (\n          <Link to={`/${user.id}`} key={user.id}>\n            <li className=\"desktop-list\">{user.name}</li>\n          </Link>\n        );\n      }\n    });\n  }\n\n  renderStyles() {\n    const { params } = this.props;\n    let class_name;\n    if (params) class_name = \"col-12 col-md-12\";\n    if (params.submenuId) class_name = \"col-2 col-md-4\";\n    if (params.contentId) class_name = \"col-2 col-md-2\";\n    return class_name;\n  }\n  render() {\n    return (\n      <div className={`${this.renderStyles()} menu`}>\n           <Link to=\"/\">\n            <h1 className=\"menus\">Main Menu</h1>\n          </Link>\n          <ul className=\"list-unstyled nav-link\">{this.renderUsers()}</ul>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    params: state.params\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchUsers }\n)(Menu);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\n// justify-content-center align-items-center\n\nclass SubMenu extends Component {\n  renderStyles() {\n    const { params } = this.props;\n    let class_name;\n    if(params.submenuId ) class_name = \"col-8\" \n    if(params.contentId) class_name = \"col-2\"\n    return class_name;\n  }\n\n  renderUser(submenuId) {\n    const { users, params } = this.props;\n    const user = users[params.submenuId];\n    if (user) {\n      return (\n        <div className=\"list-unstyled align-content-center\">\n          <Link to={`/${params.submenuId}/address`}>\n            <li>{user.address.city}</li>\n          </Link>\n          <hr />\n          <Link to={`/${params.submenuId}/company`}>\n            <li>{user.company.name}</li>\n          </Link>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    const { params } = this.props;\n    return (\n      <div className={`${this.renderStyles()} submenu`}>\n        <Link to={`/${params.submenuId}`}>\n          <h1 className='menus'>SubMenu</h1>\n        </Link>\n        {this.renderUser()}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    params: state.params\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(SubMenu);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Address extends Component {\n  renderAddress() {\n    const { params, users } = this.props;\n    let user = users[params.submenuId];\n    if (user)\n      return (\n        <div>\n            <h1>{user.address.city}</h1>\n            <h3>{user.address.street}</h3>\n            <hr />\n            <h4>{user.address.zipcode}</h4>\n            <h3>{user.address.suite}</h3>\n        </div>\n      );\n  }\n  render() {\n    return (\n      <div>\n        <h1 className=\"menus\">Address</h1>\n        {this.renderAddress()}\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    params: state.params\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Address);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nclass Company extends Component {\n    renderCompany() {\n        const { users, params } = this.props;\n        const user = users[params.submenuId];\n        if(user)\n          return (\n            <div>\n              <h1>{user.company.name}</h1>\n              <h5>{user.company.catchPhrase}</h5>\n              <hr />\n              <h4>{user.company.bs}</h4>\n            </div>\n          )\n      }\n\n  render() {\n    return (\n        <div>\n            <h1 className='menus'>Company</h1>\n            {this.renderCompany()}\n            <h1 className='bruh'>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one w</h1>\n        </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.users,\n        params: state.params\n    }\n}\nexport default connect(mapStateToProps, null)(Company);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from 'react-router-dom';\n\nimport Address from './content-components/address';\nimport Company from './content-components/company';\n\n\nclass Content extends Component {\n  renderStyles() {\n    const {params} = this.props;\n    let class_name;\n    if(params.contentId) class_name = 'd-grid col-8'\n    return class_name\n  }\n  render() {\n    return (\n      <div className={`${this.renderStyles()} content`}>\n        <Route path='/:submenuId/address' component={Address}/>\n        <Route path='/:submenuId/company' component={Company}/>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    params: state.params\n  };\n};\nexport default connect(\n  mapStateToProps,\n  null\n)(Content);\n","import React, { Component } from 'react'\nimport { Router, Route} from 'react-router-dom';\nimport history from '../history';\nimport { connect } from 'react-redux';\nimport { paramsAction, fetchUsers } from '../actions';\n\nimport Menu from '../components/Menu';\nimport SubMenu from '../components/SubMenu';\nimport Content from '../components/Content';\n\nclass AppContainer extends Component {\n  render() {\n      this.props.paramsAction(this.props.match.params)\n    return (\n      <div className='row text-center'>\n          <Router history={history}>\n            <Route path='/' component={Menu}/>\n            <Route path='/:submenuId' component={SubMenu}/>\n            <Route path='/:submenuId/:contentId' component={Content}/>\n          </Router>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, {paramsAction, fetchUsers}) (AppContainer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Router, Route } from \"react-router-dom\";\nimport reducers from \"./reducers\";\n\nimport history from \"./history\";\nimport AppContainer from './containers/appContainer';\n\n\nimport \"./style/main.scss\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst createStoreWithMiddleware = composeEnhancers(applyMiddleware(thunk))(\n  createStore\n);\n\nconst startApp = () => {\n  ReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n      <Router history={history}>\n        <div>\n          <Route path={['/:submenuId/:contentId', '/:submenuId', '/']} component={AppContainer} />\n        </div>\n      </Router>\n    </Provider>,\n    document.querySelector(\"#root\")\n  );\n  serviceWorker.register()\n};\n\nif(window.cordova) {\n  document.addEventListener('deviceready', startApp, false);\n} else {\n  startApp();\n}"],"sourceRoot":""}